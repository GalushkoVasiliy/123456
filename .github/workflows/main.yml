name: iOS Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  create:
    branches:
      - main

jobs:
  build:
    runs-on: macos-13

    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version
      - name: checkout repository
        uses: actions/checkout@v3
      - name: List contents of GITHUB_WORKSPACE
        run: |
          echo "${{ secrets.SSH }}"

      - name: Debug Workflow Variables
        run: |
          echo "CERTIFICATE_PATH: $CERTIFICATE_PATH"
          echo "PP_PATH: $PP_PATH"
          echo "KEYCHAIN_PATH: $KEYCHAIN_PATH"
          echo "P12_PASSWORD: $P12_PASSWORD"
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILES_BASE64: ${{ secrets.PROVISION_PROFILES_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          # CERTIFICATE_PATH: $RUNNER_TEMP/Certificate.p12
          # PP_ARCHIVE: $RUNNER_TEMP/mobile_pp.tgz
          # KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/Certificate.p12
          PP_ARCHIVE=$RUNNER_TEMP/mobile_pp.tgz
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILES_BASE64" | base64 --decode -o $PP_ARCHIVE

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          tar xzvf $PP_ARCHIVE -C $RUNNER_TEMP
          for PROVISION in `ls /Users/runner/work/_temp/ios/ios-build/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PROVISION)`
            cp $PROVISION ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          done
          
          security find-identity -v -p codesigning
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles  
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > "$CERTIFICATE_PATH"
          echo "$PROVISION_PROFILES_BASE64" | base64 --decode > "$PP_ARCHIVE"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          echo "P12_PASSWORD: $P12_PASSWORD"
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          tar xzvf "$PP_ARCHIVE" -C "${{ runner.temp }}"
          for PROVISION in $(ls "${{ runner.temp }}"/*.mobileprovision)
          do
            UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i "$PROVISION"))
            cp "$PROVISION" ~/Library/MobileDevice/Provisioning\ Profiles/"$UUID".mobileprovision
          done

          security find-identity -v -p codesigning
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles
      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18.17.1'
      # - name: Clean workspace
      #   run: |
      #     git clean -ffdx
      #     npm cache clean --force

      # - name: Clean Xcode Build
      #   run: |
      #     cd ios
      #     xcodebuild clean -workspace ryman.xcworkspace -scheme ryman

      # - name: Install dependencies
      #   run: npm install --legacy-peer-deps

      # - name: Set up environment variables
      #   run:
      #     echo "${{ secrets.ENV_STAGE }}" > .env.stage1

      # - name: Run rnuc .env.stage1
      #   run: npx rnuc .env.stage1

      # - name: Install CocoaPods
      #   run: |
      #     sudo gem install cocoapods
      #     pod install --project-directory=ios
   
      # - name: build archive
      #   run: |
      #     cd ios
      #     xcodebuild -workspace ryman.xcworkspace \
      #     -scheme "ryman" \
      #     -sdk iphoneos \
      #     -configuration  \
      #     -destination generic/platform=iOS \
      #     -archivePath $RUNNER_TEMP/ryman.xcarchive \
      #     archive

      # - name: export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
      #     echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
      #     xcodebuild -exportArchive -archivePath $RUNNER_TEMP/joplin.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      # - name: Upload application
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: RymanBuild
      #     path: ${{ runner.temp }}/build/Ryman.ipa
      #     retention-days: 3